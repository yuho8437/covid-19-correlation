{"version":3,"sources":["serviceWorker.js","components/Point/Point.js","components/TimeSeries/TimeSeries.js","components/Header/Header.js","components/App.js","Root.js","index.js"],"names":["Boolean","window","location","hostname","match","Option","Select","initialPlotStyle","width","height","backgroundColor","borderRadius","margin","display","justifyContent","alignItems","factorList","key","getCountryList","value","highCountryList","lowCountryList","data","i","A65","A70","BCG","CVD","DC","FSM","GDP","HB","HS","HW","MSM","ND","PD","SEX","AIR","iso","length","Object","keys","low","includes","push","high","setData","Point","state","is_value","is_clicked","loadXdata","CountryList","highXdata","lowXdata","loadYdata","highYdata","lowYdata","loadZdata","highZdata","lowZdata","handleChange","console","log","Xdata","Ydata","Zdata","setState","xaxis","yaxis","zaxis","alert","pop","handleClick","handleRefresh","this","style","marginTop","className","mode","placeholder","defaultValue","onChange","onClick","type","src","process","hovertext","x","y","z","name","marker","color","size","line","opacity","layout","l","r","b","t","React","Component","marginLeft","Daytime","Temperature","Humidity","Ozone","Windspeed","Pressure","Precipitation","UV","getMinValue","getMaxValue","getCountries","currentValue","rows","currentCountryList","getDataZ","fatalityList","fatalityDict","getDataText","textList","currentData","counter","j","TimeSeries","selectedFactor","minValue","maxValue","formatter","result","Number","toFixed","sliderChange","Math","round","dataLocations","dataZ","dataText","marginRight","locationmode","locations","zmin","zmax","text","hoverinfo","autocolorscale","colorbar","autotic","tickprefix","title","geo","countrycolor","showland","landcolor","subunitcolor","showcoastlines","showframe","lonaxis","lataxis","projection","marks","0","100","tipFormatter","nameStyle","nameBlock","Header","href","App","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68c64899.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* Data load */\nimport A65 from '../../pointData/A65.json';\nimport A70 from '../../pointData/A70.json';\nimport BCG from '../../pointData/BCG.json';\nimport CVD from '../../pointData/CVD.json';\nimport DC from '../../pointData/DC.json';\nimport FSM from '../../pointData/FSM.json';\nimport GDP from '../../pointData/GDP.json';\nimport HB from '../../pointData/HB.json';\nimport HS from '../../pointData/HS.json';\nimport HW from '../../pointData/HW.json';\nimport MSM from '../../pointData/MSM.json';\nimport ND from '../../pointData/ND.json';\nimport PD from '../../pointData/PD.json';\nimport SEX from '../../pointData/SEX.json';\nimport AIR from '../../pointData/AIR.json';\n\nimport iso from '../../pointData/countryList.json';\n\n/* Module load */\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport './Point.css';\nimport 'antd/dist/antd.css';\nimport { Select, Button } from 'antd';\nconst { Option } = Select;\n\nconst initialPlotStyle = {\n  width: '533px',\n  height: '450px',\n  backgroundColor: 'rgb(240, 240, 240)',\n  borderRadius: '1rem',\n  margin: '0 0 0 0',\n  display: 'flex', \n  justifyContent: 'center', \n  alignItems: 'center'\n}\n\nconst factorList = [\n  <Option key={'PD'}>{'1. Population density'}</Option>,\n  <Option key={'GDP'}>{'2. GDP per capita'}</Option>,\n  <Option key={'CVD'}>{'3. Cardiovascular death rate'}</Option>,\n  <Option key={'HW'}>{'4. Handwashing facilities'}</Option>,\n  <Option key={'HB'}>{'5. Hospital beds'}</Option>,\n  <Option key={'ND'}>{'6. Doctors total'}</Option>,\n  <Option key={'DC'}>{'7. Doctor consultations'}</Option>,\n  <Option key={'HS'}>{'8. Health spending'}</Option>,\n  <Option key={'SEX'}>{'9. Gender ratio (confirmed)'}</Option>,\n  <Option key={'BCG'}>{'10. BCG'}</Option>,\n  <Option key={'AIR'}>{'11. Air pollution'}</Option>,\n  <Option key={'A65'}>{'12. Age over 65'}</Option>,\n  <Option key={'A70'}>{'13. Age over 70'}</Option>,\n  <Option key={'FSM'}>{'14. Female smokers'}</Option>,\n  <Option key={'MSM'}>{'15. Male smokers '}</Option>,\n]\n\nfunction getCountryList(value){\n\n  let highCountryList = [];\n  let lowCountryList = [];\n  let data = [];\n\n  for(let i = 0; i < 3; i++){\n    if(value[i] === 'A65')\n      data[i] = A65;\n    else if(value[i] === 'A70')\n      data[i] = A70;\n    else if(value[i] === 'BCG')\n      data[i] = BCG;\n    else if(value[i] === 'CVD')\n      data[i] = CVD;\n    else if(value[i] === 'DC')\n      data[i] = DC;\n    else if(value[i] === 'FSM')\n      data[i] = FSM;\n    else if(value[i] === 'GDP')\n      data[i] = GDP;\n    else if(value[i] === 'HB')\n      data[i] = HB;\n    else if(value[i] === 'HS')\n      data[i] = HS;\n    else if(value[i] === 'HW')\n      data[i] = HW;\n    else if(value[i] === 'MSM')\n      data[i] = MSM;\n    else if(value[i] === 'ND')\n      data[i] = ND;\n    else if(value[i] === 'PD')\n      data[i] = PD;\n    else if(value[i] === 'SEX')\n      data[i] = SEX;\n    else if(value[i] === 'AIR')\n      data[i] = AIR;\n  }\n\n  for (let i = 0; i < iso.iso.length; i++){\n    if(Object.keys(data[0].low).includes(iso.iso[i])){\n      if(Object.keys(data[1].low).includes(iso.iso[i])){\n        if(Object.keys(data[2].low).includes(iso.iso[i])){\n          lowCountryList.push(iso.iso[i]);\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < iso.iso.length; i++){\n    if(Object.keys(data[0].high).includes(iso.iso[i])){\n      if(Object.keys(data[1].high).includes(iso.iso[i])){\n        if(Object.keys(data[2].high).includes(iso.iso[i])){\n          highCountryList.push(iso.iso[i]);\n        }\n      }\n    }\n  }\n\n  return {high: highCountryList, low: lowCountryList};\n}\n\nfunction setData(value){\n\n  let data;\n\n  if(value === 'A65')\n    data = A65;\n  else if(value === 'A70')\n    data = A70;\n  else if(value === 'BCG')\n    data = BCG;\n  else if(value === 'CVD')\n    data = CVD;\n  else if(value === 'DC')\n    data = DC;\n  else if(value === 'FSM')\n    data = FSM;\n  else if(value === 'GDP')\n    data = GDP;\n  else if(value === 'HB')\n    data = HB;\n  else if(value === 'HS')\n    data = HS;\n  else if(value === 'HW')\n    data = HW;\n  else if(value === 'MSM')\n    data = MSM;\n  else if(value === 'ND')\n    data = ND;\n  else if(value === 'PD')\n    data = PD;\n  else if(value === 'SEX')\n    data = SEX;\n    else if(value === 'AIR')\n    data = AIR;\n\n  return data;\n}\n\nclass Point extends React.Component {\n\n  state = {\n    is_value: false,\n    is_clicked: false\n  };\n\n  loadXdata = (value, CountryList)=>{\n\n    let data = setData(value);\n    let highXdata = [];\n    let lowXdata = [];\n\n    for (let i = 0; i < CountryList.high.length; i++){\n      highXdata[i] = data.high[CountryList.high[i]];\n    }\n\n    for (let i = 0; i < CountryList.low.length; i++){\n      lowXdata[i] = data.low[CountryList.low[i]];\n    }\n\n    return {\n      highXdata: highXdata,\n      lowXdata: lowXdata\n    }\n  }\n  \n  loadYdata = (value, CountryList)=>{\n\n    let data = setData(value);\n\n    let highYdata = [];\n    let lowYdata = [];\n\n    for (let i = 0; i < CountryList.high.length; i++){\n      highYdata[i] = data.high[CountryList.high[i]];\n    }\n\n    for (let i = 0; i < CountryList.low.length; i++){\n      lowYdata[i] = data.low[CountryList.low[i]];\n    }\n\n    return{\n      highYdata: highYdata,\n      lowYdata: lowYdata,\n    }\n  }\n  \n  loadZdata = (value, CountryList)=>{\n\n    let data = setData(value);\n\n    let highZdata = [];\n    let lowZdata = [];\n\n    for (let i = 0; i < CountryList.high.length; i++){\n      highZdata[i] = data.high[CountryList.high[i]];\n    }\n\n    for (let i = 0; i < CountryList.low.length; i++){\n      lowZdata[i] = data.low[CountryList.low[i]];\n    }\n\n    return{\n      highZdata: highZdata,\n      lowZdata: lowZdata\n    }\n  }\n  \n  handleChange = (value) => {\n    \n    if(value.length === 3){\n      let CountryList = getCountryList(value);\n      console.log(CountryList);\n      let Xdata = this.loadXdata(value[0], CountryList);\n      let Ydata = this.loadYdata(value[1], CountryList);\n      let Zdata = this.loadZdata(value[2], CountryList);\n      \n      this.setState({\n        ...this.state,\n        is_value: true,\n        xaxis: value[0],\n        yaxis: value[1],\n        zaxis: value[2],\n        highCountryList: CountryList.high,\n        lowCountryList: CountryList.low,\n        highXdata: Xdata.highXdata,\n        lowXdata: Xdata.lowXdata,\n        highYdata: Ydata.highYdata,\n        lowYdata: Ydata.lowYdata,\n        highZdata: Zdata.highZdata,\n        lowZdata: Zdata.lowZdata\n      })\n    }\n\n    else if(value.length > 3){\n      alert(\"Please select factors under three.\");\n      value.pop()\n    }\n  }\n  \n  handleClick = (value) => {\n    this.setState({\n      ...this.state,\n      is_clicked: true\n    })\n  }\n\n  handleRefresh = (value) => {\n    this.setState({\n      ...this.state,\n      is_clicked: false\n    })\n  }\n\n  render() {\n\n    const { is_value,\n            xaxis, yaxis, zaxis,\n            highCountryList, lowCountryList,\n            highXdata, highYdata, highZdata, \n            lowXdata, lowYdata, lowZdata,\n            is_clicked } = this.state;\n    \n    return (\n      \n      <div style = {{marginTop: \"50px\"}}>\n\n        <div className = \"TitleBox\">\n          <h2>1. Point data type factors</h2>\n        </div>\n\n        <div className = \"ContainerBox\">\n\n          <div className = \"SelectBox\">\n            <h3>Select three factors</h3>\n            <Select\n              style={{width:\"200px\"}}\n              mode=\"multiple\"\n              placeholder=\"Please select\"\n              defaultValue={[ ]}\n              onChange={this.handleChange}\n            >\n              {factorList}\n            </Select>\n\n            <h3 style = {{marginTop:'20px'}}>Check the answers</h3>\n            <Button \n              style={{width:\"200px\"}}\n              onClick={this.handleClick}\n            >\n              Correlation result >\n            </Button>\n            {\n              (is_clicked)?\n              <div>\n                <h3 style = {{marginTop:'20px'}}>Back to scatter plot</h3>\n                <Button \n                  style={{width:\"200px\"}}\n                  type=\"primary\"\n                  onClick={this.handleRefresh}\n                >\n                  Refresh\n                </Button>\n              </div>:\n              <div/>\n            }\n          </div>\n\n          <div className = \"PlotBox\">\n            {\n              (is_clicked)?\n                <div>\n                  <img \n                    style = {{height: '480px'}}\n                    src={process.env.PUBLIC_URL + '/corr_result.png'}\n                  />\n                </div>:\n                  (is_value)?\n                    <div>\n                      <Plot\n                        data={[\n                          {\n                            hovertext: highCountryList,\n                            x: highXdata,\n                            y: highYdata,\n                            z: highZdata,\n                            type: 'scatter3d',\n                            mode: 'markers',\n                            name: 'over 7.5% (CFR)',\n                            marker: {\n                              color: 'rgba(246, 71, 71, 1)',\n                              size: 8,\n                              line: { color: 'rgba(217, 217, 217, 0.14)', width: 0.5 },\n                              opacity: 0.8\n                            },\n                          },\n                          {\n                            hovertext: lowCountryList,\n                            x: lowXdata,\n                            y: lowYdata,\n                            z: lowZdata,\n                            type: 'scatter3d',\n                            mode: 'markers',\n                            name: 'under 7.5% (CFR)',\n                            marker: {\n                              color: 'rgba(44, 130, 201, 1)',\n                              size: 8,\n                              line: { color: 'rgba(217, 217, 217, 0.14)', width: 0.5 },\n                              opacity: 0.8\n                            },\n                        }\n                        ]}\n                        layout={{margin: {l: 0, r: 0, b: 0, t: 0 }}}\n                      />\n                    </div>:\n                    <div>\n                      <div style={initialPlotStyle}>\n                        <h3>You didn't select factors yet.</h3>\n                      </div>\n                    </div>\n            }   \n          </div>\n        </div>\n\n        {\n          (is_clicked)?\n          <div/>:\n          <h3>[ x = {xaxis} &nbsp;&nbsp;&nbsp; y = {yaxis} &nbsp;&nbsp;&nbsp; z = {zaxis} ]</h3>\n        }\n\n      </div>\n      );\n  }\n}\n\nexport default Point","/* Data load */\nimport Daytime from '../../seriesData/daytime.json';\nimport Temperature from '../../seriesData/temperature.json';\nimport Humidity from '../../seriesData/humidity.json';\nimport Ozone from '../../seriesData/ozone.json';\nimport Windspeed from '../../seriesData/windspeed.json';\nimport Pressure from '../../seriesData/pressure.json';\nimport Precipitation from '../../seriesData/precipitation.json';\nimport UV from '../../seriesData/UV.json';\n\nimport fatalityDict from '../../seriesData/fatalityDict.json';\n\n/* Module load */\nimport React from 'react';\nimport './TimeSeries.css';\nimport 'antd/dist/antd.css';\nimport Plot from 'react-plotly.js';\nimport { Select, Button, Slider } from 'antd';\nconst { Option } = Select;\n\nconst initialPlotStyle = {\n  width: '533px',\n  height: '450px',\n  backgroundColor: 'rgb(240, 240, 240)',\n  borderRadius: '1rem',\n  margin: '0 0 0 0',\n  display: 'flex', \n  justifyContent: 'center', \n  alignItems: 'center',\n  marginLeft: '20px'\n}\n\nconst factorList = [\n  <Option key={'Daytime'}>{'1. Daytime'}</Option>,\n  <Option key={'Temperature (°F)'}>{'2. Temperature'}</Option>,\n  <Option key={'Humidity'}>{'3. Humidity'}</Option>,\n  <Option key={'Ozone concentration'}>{'4. Ozone concentration'}</Option>,\n  <Option key={'Wind speed'}>{'5. Wind speed'}</Option>,\n  <Option key={'Atmospheric pressure'}>{'6. Atmospheric pressure'}</Option>,\n  <Option key={'Precipitation'}>{'7. Precipitation'}</Option>,\n  <Option key={'UV Radiation'}>{'8. UV Radiation'}</Option>\n]\n\nfunction setData(value){\n\n  let data;\n\n  if(value === 'Daytime')\n    data = Daytime;\n  else if(value === 'Temperature (°F)')\n    data = Temperature;\n  else if(value === 'Humidity')\n    data = Humidity;\n  else if(value === 'Ozone concentration')\n    data = Ozone;\n  else if(value === 'Wind speed')\n    data = Windspeed;\n  else if(value === 'Atmospheric pressure')\n    data = Pressure;\n  else if(value === 'Precipitation')\n    data = Precipitation;\n  else if(value === 'UV Radiation')\n    data = UV;\n\n  return data;\n};\n\nfunction getMinValue(data) {\n  return Object.keys(data)[0];\n};\n\nfunction getMaxValue(data){\n  return Object.keys(data)[Object.keys(data).length - 1];\n};\n\nfunction getCountries(data, currentValue){\n\n  let rows = data[currentValue];\n  let currentCountryList = []\n\n  for(let i = 0; i<Object.keys(rows).length; i++){\n    if(!currentCountryList.includes(rows[i]['iso'])){\n      currentCountryList.push(rows[i]['iso']);\n    }\n  }\n\n  return currentCountryList;\n};\n\nfunction getDataZ(currentCountryList){\n\n  let fatalityList = [];\n\n  for (let i = 0; i < currentCountryList.length; i++){\n    fatalityList[i] = fatalityDict[currentCountryList[i]];\n  }\n\n  return fatalityList;\n};\n\nfunction getDataText(data, currentCountryList, currentValue){\n  \n  let textList = [];\n  let currentData = data[currentValue];\n  let counter = 0;\n  console.log(currentData);\n\n  for (let i = 0; i < currentCountryList.length; i++){\n    for(let j = 0; j < currentData.length; j++){\n      if (currentData[j]['iso'] === currentCountryList[i]){\n        if (textList[i]){\n          textList[i] = textList[i] + '<br>' + \n            currentData[j]['date'] + ': ' + currentData[j]['fatality rate'];\n        }\n        else{\n          textList[i] = '[Death/Confirmed] <br>' + currentData[j]['date'] + ': ' + currentData[j]['fatality rate'];\n        }\n        counter++;\n      }\n\n      if (counter > 19){\n        textList[i] = textList[i] + '<br> ...too many'\n        break;\n      }\n    }\n    counter = 0;\n  }\n\n  return textList;\n};\n\nclass TimeSeries extends React.Component {\n\n    state = {\n        data: [],\n        selectedFactor: \"None\",\n        minValue: 0, maxValue:100,\n        is_clicked: false\n    };\n\n    formatter = (value) => {\n\n      let currentValue = this.state.currentValue;\n      let data = this.state.data;\n      let result;\n    \n      if(data === Daytime){\n        result = currentValue;\n      }\n      else if (data === Temperature || data === Humidity || data === Ozone || data === Windspeed || data === Pressure){\n        currentValue = Number(currentValue);\n        result = currentValue.toFixed(2);\n      }\n      else if (data === Precipitation){\n        currentValue = Number(currentValue);\n        result = currentValue.toFixed(4);\n      }\n    \n      return `${result}`;\n    }\n\n    sliderChange = (value) => {\n      if (Object.keys(this.state.data)[0]){\n        let currentValue = Object.keys(this.state.data)[Math.round(value/2.5)];\n        let currentCountryList = getCountries(this.state.data, currentValue);\n\n        let dataLocations = currentCountryList;\n        let dataZ = getDataZ(currentCountryList);\n        let dataText = getDataText(this.state.data, currentCountryList, currentValue);\n\n        this.setState({\n          currentValue: currentValue,\n          dataLocations: dataLocations, \n          dataZ: dataZ,\n          dataText: dataText,\n        })\n      }\n    };\n\n    handleChange = (value) => {\n    \n        if(value.length === 1){\n\n          let data = setData(value[0]);\n          let minValue = getMinValue(data);\n          let maxValue = getMaxValue(data);\n\n          console.log(data);\n          this.setState({\n            ...this.state,\n            data: data,\n            minValue: minValue, maxValue: maxValue,\n            selectedFactor: value[0],\n          })\n        }\n    \n        else if(value.length > 1){\n          alert(\"Please select only one factor.\");\n          value.pop()\n        }\n      }\n\n    handleClick = (value) => {\n        this.setState({\n          ...this.state,\n          is_clicked: true\n        })\n    }\n    \n    handleRefresh = (value) => {\n        this.setState({\n          ...this.state,\n          is_clicked: false\n        })\n    }\n\n    render(){\n\n        const { \n            dataLocations, dataZ, dataText,\n            selectedFactor,\n            minValue, maxValue,\n            is_clicked \n        } = this.state;\n\n        return(\n            <div>\n                <div className = \"TitleBox\">\n                    <h2>2. Time-series data type factors</h2>\n                </div>\n\n                <div className = \"ContainerBox\">\n\n                  <div className = \"SelectBox\" style={{marginRight: '20px'}}>\n                    <h3>Select one factor</h3>\n                    <Select\n                      style={{width:\"200px\"}}\n                      mode=\"multiple\"\n                      placeholder=\"Please select\"\n                      defaultValue={[ ]}\n                      onChange={this.handleChange}\n                    >\n                      {factorList}\n                    </Select>\n\n                    <h3 style = {{marginTop:'20px'}}>Check the answers</h3>\n                    <Button \n                      style={{width:\"200px\"}}\n                      onClick={this.handleClick}\n                    >\n                      Correlation result >\n                    </Button>\n                    {\n                      (is_clicked)?\n                      <div>\n                        <h3 style = {{marginTop:'20px'}}>Back to choropleth map</h3>\n                        <Button \n                          style={{width:\"200px\"}}\n                          type=\"primary\"\n                          onClick={this.handleRefresh}\n                        >\n                          Refresh\n                        </Button>\n                      </div>:\n                      <div/>\n                    }\n                  </div>\n                \n                  <div className = \"PlotBox\">\n                    {\n                      (is_clicked)?\n                        <div>\n                          <img \n                            style = {{height: '480px', marginLeft: '20px'}}\n                            src={process.env.PUBLIC_URL + '/corr_result_ser.png'}\n                          />\n                        </div>:\n                        (selectedFactor === 'None')?\n                          <div>\n                            <div style={initialPlotStyle}>\n                              <h3>You didn't select factor yet.</h3>\n                            </div>\n                          </div>:\n                          <Plot\n                          data={[\n                              {\n                                  type: 'choropleth',\n                                  locationmode: 'ISO-3',\n                                  locations: dataLocations,\n                                  z: dataZ,\n                                  zmin: 0,\n                                  zmax: 20,\n                                  text: dataText,\n                                  hoverinfo: \"location+text\",\n                                  autocolorscale: true,\n                                  marker: {\n                                      line:{\n                                          color: 'rgb(255,255,255)',\n                                          width: 1\n                                      }\n                                  },\n                                  colorbar: {\n                                      autotic: false,\n                                      tickprefix: '%',\n                                      title: 'Fatality rate',\n                                  }\n                              }\n                          ]}\n                          layout={\n                              {\n                                  geo:{\n                                      countrycolor: 'rgb(255, 255, 255)',\n                                      showland: true,\n                                      landcolor: 'rgb(230, 230, 230)',\n                                      subunitcolor: 'rgb(255, 255, 255)',\n                                      showcoastlines: false,\n                                      showframe: false,\n                                      lonaxis: {},\n                                      lataxis: {},\n                                      projection:{\n                                          type: 'mercator'\n                                      }\n                                  },\n                                  width: 650, height: 500, margin: {t: 0, b: 0, l: 0}\n                              }\n                          }\n                          />\n                    }\n                  </div>\n                  \n                </div>\n\n                <div className = \"FooterBox\">\n                    {\n                        (is_clicked)?\n                            <div/>:\n                            <div>\n                                <Slider \n                                    style={{ width: '400px', margin: \"20px auto\"}}\n                                    marks={{0: minValue, 100: maxValue}}\n                                    tipFormatter={this.formatter}\n                                    onChange={this.sliderChange}\n                                />\n                                <h3>[{selectedFactor}]</h3>\n                            </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TimeSeries;","import React from 'react';\n\n\nconst nameStyle = {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '40px',\n}\n\nconst nameBlock = {\n    marginLeft: '30px',\n    marginRight: '50px'\n}\n\nclass Header extends React.Component {\n    \n  render() {\n    \n    return (\n        <div>\n            <h1><strong>Correlation Analysis and Visualization of COVID-19</strong></h1>\n            <a href={process.env.PUBLIC_URL + '/report.pdf'}>\n                Correlation Analysis of Fatality Rate through COVID-19 Data Visualization [pdf] \n            </a> \n\n            <div style = {nameStyle}>\n                \n                <div style = {nameBlock}>\n                    <ul><b>Yuho Jeong</b></ul>\n                    <ul>yuho8437@unist.ac.kr</ul>\n                    <ul>School of Mechanical, Aerospace and Nuclear Engineering</ul>\n                    <ul>Ulsan, Republic of Korea</ul>\n                </div>\n                \n                <div style = {nameBlock}>\n                    <ul><b>Daehyeon Nam</b></ul>\n                    <ul>ndh8392@unist.ac.kr</ul>\n                    <ul>School of Electrical and Computing Engineering</ul>\n                    <ul>Ulsan, Republic of Korea</ul>\n                </div>\n                \n            </div>\n        </div>\n      );\n  }\n}\n\nexport default Header","import React from 'react';\nimport './App.css';\n\nimport Point from './Point'\nimport TimeSeries from './TimeSeries'\nimport Header from './Header'\n\nconst App = () => {\n    return (\n        <div>\n            <Header/>\n            <Point/>\n            <TimeSeries/>\n        </div>\n    )\n}\n\nexport default App;","import React from \"react\";\nimport App from './components/App';\n\n\nconst Root = () => {\n    return (\n        <App/>\n    )\n}\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Root from './Root';\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
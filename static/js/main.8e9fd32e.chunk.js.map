{"version":3,"sources":["serviceWorker.js","components/Point/Point.js","components/App.js","Root.js","index.js"],"names":["Boolean","window","location","hostname","match","Option","Select","children","i","push","key","toString","handleChange","value","console","log","Point","style","marginTop","className","width","mode","placeholder","defaultValue","onChange","data","x","y","z","type","marker","size","line","color","opacity","layout","margin","l","r","b","t","React","Component","App","textDecoration","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTN,I,4EAHQC,EAAWC,IAAXD,OAEFE,EAAW,GACRC,EAAI,GAAIA,EAAI,GAAIA,IACvBD,EAASE,KAAK,kBAACJ,EAAD,CAAQK,IAAKF,EAAEG,SAAS,IAAMH,GAAI,WAAaA,EAAEG,SAAS,MAG1E,SAASC,EAAaC,GACpBC,QAAQC,IAAR,mBAAwBF,I,IAqEXG,E,uKA/DX,OACE,yBAAKC,MAAS,CAACC,UAAW,SAExB,yBAAKC,UAAY,YACf,2DAGF,yBAAKA,UAAY,gBAEf,yBAAKA,UAAY,aACf,wDACA,kBAAC,IAAD,CACEF,MAAO,CAACG,MAAM,SACdC,KAAK,WACLC,YAAY,gBACZC,aAAc,GACdC,SAAUZ,GAETL,IAIL,yBAAKY,UAAY,WACf,kBAAC,IAAD,CACEM,KAAM,CACJ,CACIC,EAAG,CAAC,EAAG,EAAG,IAAK,KACfC,EAAG,CAAC,EAAG,EAAG,EAAG,KACbC,EAAG,CAAC,EAAG,EAAG,EAAG,KACbC,KAAM,YACNR,KAAM,UACNS,OAAQ,CACNC,KAAM,EACNC,KAAM,CACNC,MAAO,4BACPb,MAAO,IACPc,QAAS,KAGf,CACER,EAAG,CAAC,IAAK,EAAG,EAAG,KACfC,EAAG,CAAC,EAAG,EAAG,EAAG,KACbC,EAAG,CAAC,EAAG,IAAK,EAAG,KACfC,KAAM,YACNR,KAAM,UACNS,OAAQ,CACNC,KAAM,EACNC,KAAM,CACNC,MAAO,qBACPb,MAAO,IACPc,QAAS,MAIfC,OAAQ,CAACC,OAAQ,CAACC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,a,GAzDjCC,IAAMC,WCDXC,EAXH,WACR,OACI,6BACI,wBAAI1B,MAAO,CAAC2B,eAAgB,cAA5B,2CACA,0EACA,iIACA,kBAAC,EAAD,QCDGC,EANF,WACT,OACI,kBAAC,EAAD,OCARC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SJ2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8e9fd32e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport Plot from 'react-plotly.js';\nimport './Point.css';\nimport 'antd/dist/antd.css';\n\nimport { Select } from 'antd';\nconst { Option } = Select;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{\"factor: \" + i.toString(36)}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nclass Point extends React.Component {\n  render() {\n    \n    return (\n      <div style = {{marginTop: \"50px\"}}>\n\n        <div className = \"TitleBox\">\n          <h2>1. Point data type factors</h2>\n        </div>\n\n        <div className = \"ContainerBox\">\n\n          <div className = \"SelectBox\">\n            <h3>Select the three factors</h3>\n            <Select\n              style={{width:\"200px\"}}\n              mode=\"multiple\"\n              placeholder=\"Please select\"\n              defaultValue={[ ]}\n              onChange={handleChange}\n            >\n              {children}\n            </Select>\n          </div>\n\n          <div className = \"PlotBox\">\n            <Plot\n              data={[\n                {\n                    x: [1, 2, 1.5, 1.3],\n                    y: [2, 2, 1, 2.5],\n                    z: [1, 2, 2, 1.5],\n                    type: 'scatter3d',\n                    mode: 'markers',\n                    marker: {\n                      size: 8,\n                      line: {\n                      color: 'rgba(217, 217, 217, 0.14)',\n                      width: 0.5},\n                      opacity: 0.8\n                    },\n                }, \n                {\n                  x: [3.5, 3, 3, 2.5],\n                  y: [3, 4, 4, 2.5],\n                  z: [3, 3.5, 3, 3.5],\n                  type: 'scatter3d',\n                  mode: 'markers',\n                  marker: {\n                    size: 8,\n                    line: {\n                    color: 'rgb(204, 204, 204)',\n                    width: 0.5},\n                    opacity: 0.8\n                  },\n              }\n              ]}\n              layout={{margin: {l: 0, r: 0, b: 0, t: 0 }}}\n            />\n          </div>\n        </div>\n      </div>\n      );\n  }\n}\n\nexport default Point","import React from 'react';\nimport './App.css';\n\nimport Point from './Point'\n\nconst App = () => {\n    return (\n        <div>\n            <h1 style={{textDecoration: \"underline\"}}>Infomation visualization: alpha release</h1>\n            <ul>Team name: UHO (unist health organization)</ul>\n            <ul>Team members: 남대현 (ndh8392@unist.ac.kr), 정유호 (yuho8437@unist.ac.kr)</ul>\n            <Point/>\n        </div>\n    )\n}\n\nexport default App;","import React from \"react\";\nimport App from './components/App';\n\n\nconst Root = () => {\n    return (\n        <App/>\n    )\n}\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Root from './Root';\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}